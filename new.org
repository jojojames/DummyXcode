* without ycm config (global config)
** Log
2016-08-09 17:13:25,594 - DEBUG - Global extra conf not loaded or no function YcmCorePreload
serving on http://127.0.0.1:52645
2016-08-09 17:13:25,640 - INFO - Received event notification
2016-08-09 17:13:25,640 - DEBUG - Event name: BufferVisit
2016-08-09 17:13:25,659 - INFO - Received event notification
2016-08-09 17:13:25,659 - DEBUG - Event name: FileReadyToParse
2016-08-09 17:13:25,659 - INFO - Adding buffer identifiers for file: /Users/james/Developer/DummyXcode/DummyXcode/AppDelegate.m
2016-08-09 17:13:31,363 - INFO - Received event notification
2016-08-09 17:13:31,363 - DEBUG - Event name: FileReadyToParse
2016-08-09 17:13:31,363 - INFO - Adding buffer identifiers for file: /Users/james/Developer/DummyXcode/DummyXcode/AppDelegate.m
2016-08-09 17:13:31,994 - INFO - Received completion request
2016-08-09 17:13:31,995 - DEBUG - Using filetype completion: True
2016-08-09 17:13:42,338 - INFO - Received debug info request
2016-08-09 17:13:55,637 - INFO - Received health request
** Debug
ycmd debug information for buffer AppDelegate.m in objc-mode:

Server has Clang support compiled in: True
Clang version: clang version 3.8.0 (tags/RELEASE_380/final)
C-family completer debug information:
  Configuration file found and loaded
  Configuration path: /Users/james/.emacs.d/lang/objc/ycm_conf.py
  Flags: ['-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk', '-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include', '-resource-dir=/Users/james/.emacs.d/ycmd/ycmd/../clang_includes', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1', '-isystem', '/Library/Developer/CommandLineTools/usr/include/c++/v1', '-isystem', '/usr/local/include', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include', '-isystem', '/Library/Developer/CommandLineTools/usr/include', '-isystem', '/usr/include', '-isystem', '/System/Library/Frameworks', '-isystem', '/Library/Frameworks', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.3.0/include', '-fspell-checking']

Server running at: 127.0.0.1:52645
** Config
import os
import ycm_core

default_flags = [
'-isysroot',
'/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk',
'-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include'
]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags

# Thanks to https://github.com/decrispell/vim-config for this code
def FlagsForFile( filename, **kwargs ):
    """ given the source filename, return the compiler flags """
    opt_basename = '.clang_complete'
    curr_dir = os.path.dirname(filename)
    opt_fname = os.path.join(curr_dir, opt_basename)
    # keep traversing up the tree until we find the file, or hit the root
    while not os.path.exists(opt_fname):
        new_dir = os.path.dirname(curr_dir)
        if new_dir == curr_dir:
          # we've reached the root of the tree
          break
        curr_dir = new_dir
        opt_fname = os.path.join(curr_dir, opt_basename)
    try:
      fd = open(opt_fname, 'r')
    except IOError:
        return {'flags': default_flags, 'do_cache': True}
    flags = [line.strip() for line in fd.readlines()]
    relative_to = os.path.dirname(opt_fname)
    flags = MakeRelativePathsInFlagsAbsolute(flags, relative_to)
    return {
      'flags': flags, 'do_cache': True
    }
* with ycm config
** Log
2016-08-09 17:15:27,799 - DEBUG - Global extra conf not loaded or no function YcmCorePreload
serving on http://127.0.0.1:52670
2016-08-09 17:15:27,846 - INFO - Received event notification
2016-08-09 17:15:27,847 - DEBUG - Event name: BufferVisit
2016-08-09 17:15:27,866 - INFO - Received event notification
2016-08-09 17:15:27,866 - DEBUG - Event name: FileReadyToParse
2016-08-09 17:15:27,866 - INFO - Adding buffer identifiers for file: /Users/james/Developer/DummyXcode/DummyXcode/AppDelegate.m
Traceback (most recent call last):
  File "/Users/james/.emacs.d/ycmd/third_party/bottle/bottle.py", line 861, in _handle
    return route.call(**args)
  File "/Users/james/.emacs.d/ycmd/third_party/bottle/bottle.py", line 1734, in wrapper
    rv = callback(*a, **ka)
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/watchdog_plugin.py", line 109, in wrapper
    return callback( *args, **kwargs )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/hmac_plugin.py", line 72, in wrapper
    body = callback( *args, **kwargs )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/handlers.py", line 67, in EventNotification
    event_handler )( request_data )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/completers/cpp/clang_completer.py", line 319, in OnFileReadyToParse
    flags = self._FlagsForRequest( request_data )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/completers/cpp/clang_completer.py", line 396, in _FlagsForRequest
    return self._flags.FlagsForFile( filename, client_data = client_data )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/completers/cpp/flags.py", line 82, in FlagsForFile
    module = extra_conf_store.ModuleForSourceFile( filename )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/extra_conf_store.py", line 54, in ModuleForSourceFile
    return Load( ModuleFileForSourceFile( filename ) )
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/extra_conf_store.py", line 65, in ModuleFileForSourceFile
    if Load( module_file ):
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/extra_conf_store.py", line 140, in Load
    if not _ShouldLoad( module_file ):
  File "/Users/james/.emacs.d/ycmd/ycmd/../ycmd/extra_conf_store.py", line 123, in _ShouldLoad
    raise UnknownExtraConf( module_file )
UnknownExtraConf: Found /Users/james/Developer/DummyXcode/.ycm_extra_conf.py. Load?

(Question can be turned off with options, see YCM docs)
2016-08-09 17:15:29,167 - INFO - Received extra conf load request
2016-08-09 17:15:29,202 - INFO - Received event notification
2016-08-09 17:15:29,202 - DEBUG - Event name: FileReadyToParse
2016-08-09 17:15:29,202 - INFO - Adding buffer identifiers for file: /Users/james/Developer/DummyXcode/DummyXcode/AppDelegate.m
2016-08-09 17:15:32,288 - INFO - Received event notification
2016-08-09 17:15:32,288 - DEBUG - Event name: FileReadyToParse
2016-08-09 17:15:32,288 - INFO - Adding buffer identifiers for file: /Users/james/Developer/DummyXcode/DummyXcode/AppDelegate.m
2016-08-09 17:15:32,796 - INFO - Received completion request
2016-08-09 17:15:32,796 - DEBUG - Using filetype completion: True
** Debug
ycmd debug information for buffer AppDelegate.m in objc-mode:

Server has Clang support compiled in: True
Clang version: clang version 3.8.0 (tags/RELEASE_380/final)
C-family completer debug information:
  Configuration file found and loaded
  Configuration path: /Users/james/Developer/DummyXcode/.ycm_extra_conf.py
  Flags: ['/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang', '-x', 'c', '-x', 'objective-c', '-fmessage-length=0', '-fdiagnostics-show-note-include-stack', '-fmacro-backtrace-limit=0', '-std=gnu99', '-fobjc-arc', '-fmodules', '-fmodules-prune-interval=86400', '-fmodules-prune-after=345600', '-fbuild-session-file=/var/folders/k2/y7hdq90906d_5pgbt3_pt9jw0000gn/C/org.llvm.clang/ModuleCache/Session.modulevalidation', '-fmodules-validate-once-per-build-session', '-Wnon-modular-include-in-framework-module', '-Werror=non-modular-include-in-framework-module', '-Wno-trigraphs', '-fpascal-strings', '-Os', '-fno-common', '-Wno-missing-field-initializers', '-Wno-missing-prototypes', '-Werror=return-type', '-Wunreachable-code', '-Wno-implicit-atomic-properties', '-Werror=deprecated-objc-isa-usage', '-Werror=objc-root-class', '-Wno-arc-repeated-use-of-weak', '-Wduplicate-method-match', '-Wno-missing-braces', '-Wparentheses', '-Wswitch', '-Wunused-function', '-Wno-unused-label', '-Wno-unused-parameter', '-Wunused-variable', '-Wunused-value', '-Wempty-body', '-Wconditional-uninitialized', '-Wno-unknown-pragmas', '-Wno-shadow', '-Wno-four-char-constants', '-Wno-conversion', '-Wconstant-conversion', '-Wint-conversion', '-Wbool-conversion', '-Wenum-conversion', '-Wshorten-64-to-32', '-Wpointer-sign', '-Wno-newline-eof', '-Wno-selector', '-Wno-strict-selector-match', '-Wundeclared-selector', '-Wno-deprecated-implementations', '-DNS_BLOCK_ASSERTIONS=1', '-DOBJC_OLD_DISPATCH_PROTOTYPES=0', '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk', '-fstrict-aliasing', '-Wprotocol', '-Wdeprecated-declarations', '-miphoneos-version-min=9.3', '-g', '-fvisibility=hidden', '-Wno-sign-conversion', '-fembed-bitcode-marker', '-iquote', '/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DummyXcode-generated-files.hmap', '-I/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DummyXcode-own-target-headers.hmap', '-I/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DummyXcode-all-target-headers.hmap', '-iquote', '/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DummyXcode-project-headers.hmap', '-I/Users/james/Developer/DummyXcode/build/Release-iphoneos/include', '-I/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DerivedSources/armv7', '-I/Users/james/Developer/DummyXcode/build/DummyXcode.build/Release-iphoneos/DummyXcode.build/DerivedSources', '-F/Users/james/Developer/DummyXcode/build/Release-iphoneos', '-resource-dir=/Users/james/.emacs.d/ycmd/ycmd/../clang_includes', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1', '-isystem', '/Library/Developer/CommandLineTools/usr/include/c++/v1', '-isystem', '/usr/local/include', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include', '-isystem', '/Library/Developer/CommandLineTools/usr/include', '-isystem', '/usr/include', '-isystem', '/System/Library/Frameworks', '-isystem', '/Library/Frameworks', '-isystem', '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.3.0/include', '-fspell-checking']

Server running at: 127.0.0.1:52670
** Config
import os
import ycm_core

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
# CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.
flags = [
'-isysroot',
'/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk',
    '-I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.3.0/include',
]

# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = '/Users/james/Developer/DummyXcode'

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )

def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )
  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }
